 CHECKPOINT 11
    ------------------- Simulation ------------------------------
    - To move robot
    ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args  -r cmd_vel:=/diffbot_base_controller/cmd_vel_unstamped

    ------   Task1 Mapping  --------

    - Terminal 1
    source ~/sim_ws/install/setup.bash
    ros2 launch the_construct_office_gazebo warehouse_rb1.launch.xml

    - Terminal 2
    ros2 launch cartographer_slam cartographer.launch.py env_type:=sim

    - Terminal 3
    cd ros2_ws/src/warehouse_project
    rviz2 -d cartographer_slam/config/rviz2_config.rviz

    - Terminal 4
    ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args  -r cmd_vel:=/diffbot_base_controller/cmd_vel_unstamped

    ------   Task1 Map Server --------
    - Terminal 1
    source ~/sim_ws/install/setup.bash
    ros2 launch the_construct_office_gazebo warehouse_rb1.launch.xml

    - Terminal 2
    ros2 launch map_server map_server.launch.py map_file:=warehouse_map_sim.yaml
    or for real robot
    ros2 launch map_server map_server.launch.py map_file:=warehouse_map_real.yaml

    - Terminal 3 (during development)
    cd ros2_ws/src/warehouse_project/
    rviz2 -d cartographer_slam/config/rviz2_config.rviz

    ------ Task 2 Localization ---------
    - Terminal 1
    source ~/sim_ws/install/setup.bash
    ros2 launch the_construct_office_gazebo warehouse_rb1.launch.xml

    - Terminal 2
    ros2 launch localization_server localization.launch.py map_file:=warehouse_map_sim.yaml
    or for real robot
    ros2 launch localization_server localization.launch.py map_file:=warehouse_map_real.yaml

    - Terminal 3
    ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args  -r cmd_vel:=/diffbot_base_controller/cmd_vel_unstamped

    ----- Task 3 Navigation --------
    - Terminal 1
    source ~/sim_ws/install/setup.bash
    ros2 launch the_construct_office_gazebo warehouse_rb1.launch.xml

    - Terminal 2
    ros2 launch localization_server localization.launch.py map_file:=warehouse_map_sim.yaml

    - Terminal 3
    ros2 launch path_planner_server pathplanner.launch.py 
    or
    ros2 launch path_planner_server pathplanner.launch.py env_type:=sim

    ------------------- Real Robot ------------------------------
    - To move robot
    ros2 run teleop_twist_keyboard teleop_twist_keyboard 
    ------   Task1 Mapping  --------

    - Terminal 1
    ros2 launch cartographer_slam cartographer.launch.py env_type:=real

    #- Terminal 2 //Added rviz inside launch file 
    #cd ros2_ws/src/warehouse_project
    #rviz2 -d cartographer_slam/config/rviz2_config_realrobot.rviz

    - Terminal 3
    ros2 run teleop_twist_keyboard teleop_twist_keyboard 

    ------   Task1 Map Server --------
    - Terminal 1
    ros2 launch map_server map_server.launch.py map_file:=warehouse_map_real.yaml



    ------ Task 2 Localization ---------
    - Terminal 1
    ros2 launch localization_server localization.launch.py map_file:=warehouse_map_real.yaml

    - Terminal 2
    ros2 run teleop_twist_keyboard teleop_twist_keyboard 

    ----- Task 3 Navigation --------
    - Terminal 1
    ros2 launch localization_server localization.launch.py map_file:=warehouse_map_real.yaml

    - Terminal 2
    ros2 launch path_planner_server pathplanner.launch.py env_type:=real

    ------------------- View Frames ------------------------------
    ros2 run tf2_tools view_frames

CHECKPOINT 12

    ------------------- Simulation ------------------------------
Lifting the cart with CLI
ros2 topic pub /elevator_up std_msgs/msg/String data:\ \'\'\ 
- Terminal 1
source ~/sim_ws/install/setup.bash
ros2 launch the_construct_office_gazebo warehouse_rb1.launch.xml

- Terminal 2
ros2 launch localization_server localization.launch.py map_file:=warehouse_map_sim.yaml

- Terminal 3
ros2 launch path_planner_server pathplanner.launch.py 
or
ros2 launch path_planner_server pathplanner.launch.py env_type:=sim

- Terminal 4
python3 ~/ros2_ws/src/warehouse_project/nav2_apps/scripts/move_shelf_to_ship.py

Lifecycle manager by CLI
pause node
ros2 service call /lifecycle_manager_pathplanner/manage_nodes  nav2_msgs/srv/ManageLifecycleNodes command:\ 1\
resume node 
ros2 service call /lifecycle_manager_pathplanner/manage_nodes  nav2_msgs/srv/ManageLifecycleNodes command:\ 2\

# How to check the footprint
https://docs.nav2.org/setup_guides/footprint/setup_footprint.html

# How to set param while node running
user:~$ ros2 param set /global_costmap/global_costmap robot_radius 2.0
Set parameter successful
user:~$ ros2 param set /local_costmap/local_costmap footprint "[ [0.5, 0.5], [0.5, -0.5], [-0.5, -0.5], [-0.5, 0.5] ]"
Set parameter successful

# How to set param while node running with Service
-----------
user:~$ ros2 service call /local_costmap/local_costmap/get_parameters rcl_interfaces/srv/GetParameters "{names: ['footprint']}"
waiting for service to become available...
requester: making request: rcl_interfaces.srv.GetParameters_Request(names=['footprint'])

response:
rcl_interfaces.srv.GetParameters_Response(values=[rcl_interfaces.msg.ParameterValue(type=4, bool_value=False, integer_value=0, double_value=0.0, string_value='[ [0.5, 0.5], [0.5, -0.5], [-0.5, -0.5], [-0.5, 0.5] ]', byte_array_value=[], bool_array_value=[], integer_array_value=[], double_array_value=[], string_array_value=[])])
----------------- Set with Service Local costmap
user:~$ ros2 service call /local_costmap/local_costmap/set_parameters rcl_interfaces/srv/SetParameters "parameters: [{name: 'footprint', value:{type: 4, string_value: '[ [0.15, 0.15], [0.15, -0.15], [-0.15, -0.15], [-0.15, 0.15] ]'}}]"
waiting for service to become available...
requester: making request: rcl_interfaces.srv.SetParameters_Request(parameters=[rcl_interfaces.msg.Parameter(name='footprint', value=rcl_interfaces.msg.ParameterValue(type=4, bool_value=False, integer_value=0, double_value=0.0, string_value='[ [0.15, 0.15], [0.15, -0.15], [-0.15, -0.15], [-0.15, 0.15] ]', byte_array_value=[], bool_array_value=[], integer_array_value=[], double_array_value=[], string_array_value=[]))])

response:
rcl_interfaces.srv.SetParameters_Response(results=[rcl_interfaces.msg.SetParametersResult(successful=True, reason='')])
-------------------Set with Service global costmap

user:~$ ros2 service call /global_costmap/global_costmap/set_parameters rcl_interfaces/srv/SetParameters "parameters: [{name: 'robot_radius', value:{type: 3, string_value: '0.2'}}]"
requester: making request: rcl_interfaces.srv.SetParameters_Request(parameters=[rcl_interfaces.msg.Parameter(name='robot_radius', value=rcl_interfaces.msg.ParameterValue(type=3, bool_value=False, integer_value=0, double_value=0.0, string_value='0.2', byte_array_value=[], bool_array_value=[], integer_array_value=[], double_array_value=[], string_array_value=[]))])

response:
rcl_interfaces.srv.SetParameters_Response(results=[rcl_interfaces.msg.SetParametersResult(successful=True, reason='')])

user:~$


